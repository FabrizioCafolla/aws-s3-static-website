AWSTemplateFormatVersion: '2010-09-09'
Description: ''

Parameters:
  FQDN:
    Description: The full domain name e.g. test.io (WARNING without www.)
    AllowedPattern: (?!-)[a-zA-Z0-9-.]{1,63}(?<!-)
    ConstraintDescription: must be a valid DNS zone name.
    Type: String
  ARNSslCertificate:
    Description: Certificate ssl aws Arn
    Type: String
  UserName:
    Type: String
    Default: 'TestUser'
  UserPassword:
    Type: String
    Default: 'ChangeMe!'
    NoEcho: true
  GroupName:
    Type: String
    Default: 'TestGroup'
  PolicyName:
    Type: String
    Default: 'TestPolicy'

Resources:
  S3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Ref 'FQDN'
      AccessControl: Private
      WebsiteConfiguration:
        IndexDocument: index.html
      Tags:
        - Key: "service"
          Value: !Ref 'FQDN'

  CloudFrontOriginIdentity:
    Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: 'origin identity'

  S3BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties: 
      Bucket: !Ref 'S3Bucket'
      PolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            CanonicalUser:
              Fn::GetAtt: [ CloudFrontOriginIdentity , S3CanonicalUserId ]
          Action: "s3:GetObject"
          Resource: !Join ['', ['arn:aws:s3:::', !Ref 'S3Bucket', '/*' ]]

  S3BucketLogs:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Join ['', ['logs-', !Ref 'FQDN' ]]
      AccessControl: Private
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        IgnorePublicAcls: true
        BlockPublicPolicy: true
        RestrictPublicBuckets: true
      Tags:
        - Key: "service"
          Value: !Ref 'FQDN'

  CDNCachePolicy:
    Type: AWS::CloudFront::CachePolicy
    Properties: 
      CachePolicyConfig: 
        DefaultTTL: 86400
        MinTTL: 86400
        MaxTTL: 604800
        Name: "StandardCachePolicy"
        ParametersInCacheKeyAndForwardedToOrigin:
          CookiesConfig:
            CookieBehavior: all
          EnableAcceptEncodingBrotli: true
          EnableAcceptEncodingGzip: true
          HeadersConfig:
            HeaderBehavior: none
          QueryStringsConfig:
            QueryStringBehavior: all

  CDNWebsite: 
    Type: AWS::CloudFront::Distribution
    Properties:
      Tags:
        - Key: "service"
          Value: !Ref 'FQDN'
      DistributionConfig:          
        ViewerCertificate:
          AcmCertificateArn: !Ref 'ARNSslCertificate'
          SslSupportMethod: sni-only
        Aliases: 
          - !Join ['', ['www.', !Ref 'FQDN' ]]
          - !Join ['', ['store.', !Ref 'FQDN' ]]
          - !Ref 'FQDN'
        Enabled: true
        DefaultCacheBehavior: 
          CachePolicyId: !GetAtt 'CDNCachePolicy.Id'
          AllowedMethods:
            - HEAD
            - GET
            - OPTIONS
          ForwardedValues:
            QueryString: true
          TargetOriginId: S3Origin
          ViewerProtocolPolicy: redirect-to-https
        DefaultRootObject: index.html
        HttpVersion: 'http2'
        Origins:
        - DomainName: !GetAtt S3Bucket.RegionalDomainName
          Id: S3Origin
          S3OriginConfig:
            OriginAccessIdentity:  !Sub "origin-access-identity/cloudfront/${CloudFrontOriginIdentity}"
        Logging:
          Bucket: !GetAtt S3BucketLogs.DomainName
          IncludeCookies: false
          Prefix: 'cfn-logs'
        CustomErrorResponses:
          - ErrorCachingMinTTL: 86400
            ErrorCode: 403
            ResponseCode: 200
            ResponsePagePath: '/index.html'
          - ErrorCachingMinTTL: 86400
            ErrorCode: 404
            ResponseCode: 200
            ResponsePagePath: '/index.html'
          
  CdnS3Group:
    Type: 'AWS::IAM::Group'
    Properties:
      GroupName: !Ref 'GroupName'

  CdnS3GroupPolicies:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyName: !Ref 'PolicyName'
      PolicyDocument:
        Statement:
        - Effect: Allow
          Action: [               
              "s3:GetBucketLocation",
              "s3:ListAllMyBuckets"
            ]
          Resource: [ '*']
        - Effect: Allow
          Action: [               
              "s3:ListBucket"
            ]
          Resource: [ !Join ['', [ 'arn:aws:s3:::', !Ref 'FQDN' ]] ]
        - Effect: Allow
          Action: [               
              "s3:PutObject",
              "s3:GetObject",
              "s3:GetObjectVersion",
              "s3:DeleteObject",
              "s3:DeleteObjectVersion"
            ]
          Resource: [ !Join ['', [ 'arn:aws:s3:::', !Ref 'FQDN', '/*' ]] ]
      Groups: [!Ref 'CdnS3Group']

  CdnS3User:
    Type: 'AWS::IAM::User'
    Properties:
      UserName: !Ref 'UserName'
      Groups: [!Ref 'CdnS3Group']
      LoginProfile:
        Password: !Ref 'UserPassword'
        PasswordResetRequired: true

  CdnS3UserPolicies:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyName: 'ChangePasswordPolicy'
      PolicyDocument:
        Statement:
        - Effect: Allow
          Action: [               
              "iam:ChangePassword"
            ]
          Resource: [ 'arn:aws:iam::*:user/${aws:username}']
        - Effect: Allow
          Action: [               
              "iam:GetAccountPasswordPolicy"
            ]
          Resource: [ '*']
      Users: [!Ref 'CdnS3User']

  CdnS3UserKeys:
    Type: 'AWS::IAM::AccessKey'
    Properties:
      UserName: !Ref 'CdnS3User'
      
Outputs:
  CDNUrl:
    Value: !Join ['', ['https://', !GetAtt CDNWebsite.DomainName ]]
    Description: CDN url 
  BucketName:
    Value: !Ref 'S3Bucket'
    Description: Name of S3 bucket to hold website content